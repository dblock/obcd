#!/usr/bin/env ruby
require 'gli'
require 'obcd'

include GLI::App

program_desc 'Deal with obsessive compulsive issues of programmers in Objective-C'

flag [:p, :path], desc: 'Path to search', default_value: Dir.pwd
switch [:v, :verbose], desc: 'Verbose', default_value: false

default_command :help

pre do |global_options, command, options, args|
  $obcd = Obcd::Finder.new(global_options[:path])
end

desc "Find files that don't match rules."
arg_name 'check, check[, check]*'
long_desc "Available checks:\n\n" + Obcd::Checks.all.map { |check|
  "- #{check.name.split('::').last}: #{check.desc}"
}.join("\n\n")
command :find do |c|
  c.action do |global_options, options, args|
    root = File.file?($obcd.path) ? Pathname.new(File.dirname($obcd.path)) : Pathname.new($obcd.path)

    checks = args.map do |arg|
      begin
        "Obcd::Checks::#{arg}".constantize
      rescue Exception => e
        STDERR.puts "Invalid check #{arg}, #{e.message}."
        exit_now! nil, -1
      end
    end

    if checks.empty?
      STDERR.puts "Please specify at least one check. Run 'obcd help find' for a list."
      exit_now! nil, -1
    end

    violation_count = 0
    $obcd.find do |filename|
      path = Pathname.new(filename)
      relative_path = path.relative_path_from(root).to_s
      STDOUT.write "Checking #{relative_path}: " if global_options[:verbose]
      violations = {}
      checks.each do |check|
        instance_violations = check.check(filename)
        violation_count += instance_violations.count
        violations.merge! check => instance_violations unless instance_violations.empty?
      end
      if violations.empty?
        STDOUT.puts "ok" if global_options[:verbose]
      else
        STDOUT.write "#{relative_path}: " unless global_options[:verbose]
        all_file_violations = violations.values.flatten
        puts "#{all_file_violations.count} violation#{all_file_violations.count == 1 ? '' : 's'}"
        violations.each_pair do |check, violations|
          violations.each do |violation|
            puts "#{path}:#{violation.line}:1: warning: #{check.name.split('::').last}: #{violation.description}"
          end
        end
      end
    end
    if violation_count > 0 || global_options[:verbose]
      puts "Found #{violation_count} violation#{violation_count == 1 ? '' : 's'}."
    end
    exit_now! nil, violation_count
  end
end

exit run(ARGV)
